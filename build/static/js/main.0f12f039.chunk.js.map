{"version":3,"sources":["Components/Note.js","Components/Error.js","services/notes.js","Components/Footer.js","Components/App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","axios","get","then","response","data","noteObject","post","id","put","Footer","style","color","fontStyle","fontSize","textAlign","margin","App","useState","notes","setNotes","newNote","setNewNote","showAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","event","preventDefault","date","Date","Math","random","returnedNote","concat","map","key","find","changedNote","catch","error","setTimeout","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"0MAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,8BCM3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKJ,UAAU,SACVI,ICWE,EAfA,WAEb,OADgBC,IAAMC,IALR,cAMCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAVR,aAUsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAfF,aAeE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCG5BK,EAjBA,WASX,OACI,yBAAKC,MATW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,GACVC,UAAW,SACXC,OAAQ,KAKJ,6BACA,+DC6EGC,G,MApFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,aAIwBL,mBAAS,2BAJjC,mBAITM,EAJS,KAIKC,EAJL,KAOhBC,qBAAU,WACRC,IAECxB,MAAK,SAAAyB,GACJR,EAASQ,QAEV,IAiBH,IAkBMC,EAAcN,EAAUJ,EAAQA,EAAMW,QAAO,SAAAtC,GAAI,MAAuB,SAAnBA,EAAKG,aAyBhE,OACE,oCACA,iDACA,kBAAC,EAAD,CAAcK,QAASwB,IACrB,4BAAQ1B,QAnBI,SAACiC,GACfA,EAAMC,iBACN,IAAM1B,EAAa,CACjBT,QAASwB,EACTY,KAAM,IAAIC,KACVvC,UAAWwC,KAAKC,SAAW,IAG7BT,EAAmBrB,GAClBH,MAAK,SAAAkC,GACJjB,EAASD,EAAMmB,OAAOD,IACtBf,EAAW,SAQX,YACA,6BA5BeO,EAAYU,KAAI,SAAA/C,GAAI,OACrC,kBAAC,EAAD,CACEgD,IAAKhD,EAAKgB,GACVhB,KAAMA,EACNC,iBAAkB,kBAxBK,SAAAe,GAChB,sCAAkCA,GAA3C,IACMhB,EAAO2B,EAAMsB,MAAK,SAAAjD,GAAI,OAAIA,EAAKgB,KAAOA,KACtCkC,EAAW,eAAQlD,EAAR,CAAcG,WAAYH,EAAKG,YAEhDgC,EAAmBnB,EAAIkC,GACtBvC,MAAK,SAAAkC,GACJjB,EAASD,EAAMoB,KAAI,SAAA/C,GAAI,OAAKA,EAAKgB,KAAOA,EAAKhB,EAAO6C,SAErDM,OAAM,SAAAC,GACLnB,EAAgB,QAAD,OAASjC,EAAKK,QAAd,yCACfgD,YAAW,WACTpB,EAAgB,QACf,KACHL,EAASD,EAAMW,QAAO,SAAAtC,GAAI,OAAIA,EAAKgB,KAAOA,SAUlBsC,CAAmBtD,EAAKgB,WAyBhD,kBAAC,EAAD,SC9ENuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0f12f039.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n  \n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n      </li>\n  )\n}\n\nexport default Note","import React from 'react';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification;","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\n//Instead of returning a promise, we return the promise data\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = noteObject => {\n  const request = axios.post(baseUrl, noteObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, noteObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, noteObject);\n  return request.then(response => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update\n};\n","import React from 'react';\n\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16,\n        textAlign: 'center',\n        margin: 20\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Shehryar Bajwa 2019</em>\n        </div>\n    )\n}\n\nexport default Footer;","import React, { useState, useEffect } from \"react\";\nimport Note from \"./Note\";\nimport Phonebook from \"./PhoneBook\";\nimport noteService from '../services/notes.js'\nimport Notification from './Error'\nimport Footer from \"../Components/Footer\"\nimport '../index.css';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n\n  useEffect(() =>{\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  // Toggle the importance field in JSON when this button is clicked\n  // We fetch the url with the provided id to the function\n  // We then run a built-in JS function called notes.find\n  // This iterates over the notes array and finds the note with the same id\n  // note => note.id === id\n  // The condition is to to find a note whose id is the same as the id provided above\n  // Then we use a spread operator to iterate over the chosen node's properties\n  // When we add values after the spread operator then the value of the important property of the new object will be set to the false of its previous set value\n  // Then we use the update/PATCH method to update the Note with the id and the changedNote\n  // The update function returns response.data\n  // We use that data as returnedNote\n  // and setNotes to first use the existing notes with a map function\n  // The map function checks if the node received where note.id !== provided id\n  // If it is false where note.id and the id provided are the same we set the Notes array with the returnedNote with the updatedID\n\n  const toggleImportanceOf = id => {\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find(note => note.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService.update(id, changedNote)\n    .then(returnedNote => {\n      setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n    })\n    .catch(error => {\n      setErrorMessage(`Note ${note.content} was already removed from the server`)\n      setTimeout(() =>{\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(note => note.id !== id))\n    })\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === 'true');\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() > 0.5\n    };\n\n    noteService.create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    });\n  };\n\n  return (\n    <>\n    <h3>Notes Application</h3>\n    <Notification message={errorMessage} />\n      <button onClick={addNote}>Add Note</button>\n      <div>{rows()}</div>\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import React, {useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Note from \"./Components/Note\";\nimport Course from \"./Components/Course\";\nimport PhoneBook from \"./Components/PhoneBook\";\nimport axios from \"axios\";\nimport App from \"./Components/App\";\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: \"HTML is easy\",\n//     date: \"2019-05-30T17:30:31.098Z\",\n//     important: false\n//   },\n//   {\n//     id: 2,\n//     content: \"Browser can execute only Javascript\",\n//     date: \"2019-05-30T18:39:34.091Z\",\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: \"GET and POST are the most important methods of HTTP protocol\",\n//     date: \"2019-05-30T19:20:14.298Z\",\n//     important: true\n//   }\n// ];\n\n// const courses = [\n//     {\n//       name: \"Fundamentals of React\",\n//       exercises: 10,\n//       id: 1\n//     },\n//     {\n//       name: \"Using props to pass data\",\n//       exercises: 7,\n//       id: 2\n//     },\n//     {\n//       name: \"State of a component\",\n//       exercises: 14,\n//       id: 3\n//     }\n//   ];\n\n// const App = (props) => {\n\n//     const [notes, setNotes] = useState(props.notes)\n//     const [newNote, setNewNote] = useState('a new note...')\n//     const [showAll, setShowAll] = useState(true)\n\n\n//     const {courses} = props;\n\n//   const addNote = (event) => {\n//     event.preventDefault();\n    \n//     const noteObject = {\n//       content: newNote,\n//       date: new Date(),\n//       important: Math.random() > 0.5,\n//       id: notes.length + 1\n//     };\n\n//     setNotes(notes.concat(noteObject))\n//     setNewNote('')\n//   }\n\n//   const handleNoteChange = (event) => {\n//     setNewNote(event.target.value)\n//   }\n\n//   const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n//   const rows = () => notesToShow.map(note => <Note key={note.id} note={note} />);\n\n//   const handleImportantButton = () => {\n//     setShowAll(!showAll)\n//   }\n\n\n//   const course_rows = () =>\n//     courses.map(course => (\n//       <Course key={course.id} course={course.name} exercises={course.exercises} />\n//     ));\n  \n\n//   const exercises_array = () => courses.map(course => (\n//     course.exercises\n//   ))\n\n//   const exercises_arr = exercises_array()\n\n//   const res = () => exercises_arr.reduce((acc, current_value) => acc + current_value);\n\n//   return (\n//     <div>\n//       <h1>Half Stack application Development</h1>\n//       <ul>{course_rows()}</ul>\n//       <p>Total: {res()}</p>\n//       <h1>Notes</h1>\n//       <button onClick={handleImportantButton}>\n//       Show {showAll ? 'important' : 'all' }\n//       </button>\n//       <ul>{rows()}</ul>\n//       <form onSubmit={addNote}>\n//         <input value={newNote} onChange={handleNoteChange}/>\n//         <button type=\"submit\">save</button>\n//       </form>\n//       <div><PhoneBook /></div>\n//     </div>\n//   );\n// };\n"],"sourceRoot":""}